#include "qlogger.h"
#include "QIODevice"

QLogger::QLogger (QString fileName)
{
    file = new QFile(fileName);
    file -> open(QIODevice::ReadWrite);
    stream.setDevice(file);
}
void QLogger::read (DataSet & dataSetBuffer  )
{
    stream >> dataSetBuffer.current_wheel_angle;
    stream >> dataSetBuffer.desired_wheel_angle;
    stream >> dataSetBuffer.wheel_power_r;
    stream >> dataSetBuffer.wheel_power_l;
    stream >> dataSetBuffer.physics_timestep;
    stream >> dataSetBuffer.control_interval;
    float buffer = 0;
    stream >> buffer;
    dataSetBuffer.camera_position.setX(buffer);
    stream >> buffer;
    dataSetBuffer.camera_position.setY(buffer);
    stream >> buffer;
    dataSetBuffer.camera_position.setZ(buffer);
    stream >> buffer;
    dataSetBuffer.camera_rotation.setX(buffer);
    stream >> buffer;
    dataSetBuffer.camera_rotation.setY(buffer);
    stream >> buffer;
    dataSetBuffer.camera_rotation.setZ(buffer);
    for(int i = 0; i < CAMERA_FRAME_LEN; i++)
        stream >> dataSetBuffer.camera_pixels[i];
}

void QLogger::write (DataSet& dataSet )
{
    stream << dataSet.current_wheel_angle;
    stream << dataSet.desired_wheel_angle;
    stream << dataSet.wheel_power_r;
    stream << dataSet.wheel_power_l;
    stream << dataSet.physics_timestep;
    stream << dataSet.control_interval;
    stream << dataSet.camera_rotation.x();
    stream << dataSet.camera_rotation.y();
    stream << dataSet.camera_rotation.z();
    stream << dataSet.camera_position.x();
    stream << dataSet.camera_position.y();
    stream << dataSet.camera_position.z();
    for(int i = 0; i < CAMERA_FRAME_LEN; i++)
        stream << dataSet.camera_pixels[i];
}
QVector <DataSet> * QLogger::readAllFile (){
    QVector <DataSet> * newVector = new QVector <DataSet> ();
    DataSet * buffer = new DataSet();
    while(!file -> atEnd()){
        read(*buffer);
        newVector -> append(*buffer);
        buffer = new DataSet();
    }
    return newVector;
}

void QLogger::closeLogger(){
    file -> flush();
    file -> close();
    file -> ~QFile();
}
QLogger::~QLogger(){
    closeLogger();
}
